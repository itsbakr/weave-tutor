-- ============================================================================
-- TutorPilot AI - Complete Database Schema
-- Self-Improving Educational Agent System
-- ============================================================================
--
-- This schema supports:
-- - Hierarchical agent handoff (Strategy → Lesson → Activity)
-- - Self-evaluation with detailed criteria scoring
-- - Collaborative editing with version history
-- - Learning insights from tutor feedback
-- - Agentic memory for personalization
-- - Code deployment tracking (Daytona sandboxes)
--
-- Usage:
--   Run this entire file on a fresh Supabase database
--   psql -h your-project.supabase.co -U postgres -d postgres -f complete-schema.sql
--
-- ============================================================================

-- ============================================================================
-- CORE ENTITIES
-- ============================================================================

-- Tutors table
CREATE TABLE tutors (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  name text NOT NULL,
  email text UNIQUE NOT NULL,
  teaching_style text,
  education_system text,
  created_at timestamptz DEFAULT now()
);

COMMENT ON TABLE tutors IS 'Tutors who use the platform to create educational content';

-- Students table
CREATE TABLE students (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  tutor_id uuid REFERENCES tutors(id),
  name text NOT NULL,
  grade text,
  subject text,
  learning_style text,
  nationality text,
  residence text,
  languages jsonb DEFAULT '[]',
  interests jsonb DEFAULT '[]',
  objectives jsonb DEFAULT '[]',
  created_at timestamptz DEFAULT now()
);

COMMENT ON TABLE students IS 'Students with personalized learning profiles';
CREATE INDEX idx_students_tutor ON students(tutor_id);

-- ============================================================================
-- GENERATED CONTENT (with agent handoff support)
-- ============================================================================

-- Strategies table (4-week learning plans)
CREATE TABLE strategies (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  tutor_id uuid REFERENCES tutors(id),
  student_id uuid REFERENCES students(id),
  title text NOT NULL,
  description text,
  weeks_count integer DEFAULT 4,
  content jsonb,
  knowledge_contexts jsonb, -- Research for all weeks (reused by Lesson Creator)
  self_evaluation jsonb, -- Self-evaluation scores and criteria
  current_version integer DEFAULT 1,
  is_latest boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

COMMENT ON TABLE strategies IS '4-week learning strategies generated by Strategy Planner';
COMMENT ON COLUMN strategies.knowledge_contexts IS 'Perplexity research for all strategy weeks (agent handoff optimization)';
COMMENT ON COLUMN strategies.self_evaluation IS 'AI self-critique: scores on pedagogical soundness, clarity, feasibility, etc.';

CREATE INDEX idx_strategies_student ON strategies(student_id);
CREATE INDEX idx_strategies_latest ON strategies(is_latest) WHERE is_latest = true;

-- Lessons table (comprehensive lesson plans)
CREATE TABLE lessons (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  tutor_id uuid REFERENCES tutors(id),
  student_id uuid REFERENCES students(id),
  strategy_id uuid REFERENCES strategies(id),
  strategy_week_number integer, -- Which week from parent strategy (agent handoff)
  title text NOT NULL,
  duration integer DEFAULT 60,
  content jsonb,
  knowledge_context jsonb, -- Research sources + explanations (reused by Activity Creator)
  self_evaluation jsonb,
  current_version integer DEFAULT 1,
  is_latest boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

COMMENT ON TABLE lessons IS 'Comprehensive lesson plans with pre-class work, in-class activities, homework';
COMMENT ON COLUMN lessons.strategy_week_number IS 'Links to specific week of parent strategy (NULL if standalone)';
COMMENT ON COLUMN lessons.knowledge_context IS 'Perplexity sources + explanations (avoids redundant API calls)';

CREATE INDEX idx_lessons_student ON lessons(student_id);
CREATE INDEX idx_lessons_strategy_week ON lessons(strategy_id, strategy_week_number);
CREATE INDEX idx_lessons_latest ON lessons(is_latest) WHERE is_latest = true;

-- Activities table (interactive React activities)
CREATE TABLE activities (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  tutor_id uuid REFERENCES tutors(id),
  student_id uuid REFERENCES students(id),
  lesson_id uuid REFERENCES lessons(id),
  title text NOT NULL,
  type text NOT NULL CHECK (type IN ('traditional', 'simulation', 'interactive')),
  duration integer DEFAULT 20,
  content jsonb,
  code text, -- Generated React code
  language varchar DEFAULT 'javascript',
  sandbox_id varchar, -- Daytona sandbox ID
  sandbox_url text, -- Live URL of deployed activity
  deployment_status text,
  deployment_attempts integer DEFAULT 0,
  error_logs text,
  self_evaluation jsonb,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

COMMENT ON TABLE activities IS 'Interactive React activities with auto-debugging and Daytona deployment';
COMMENT ON COLUMN activities.code IS 'React component code generated by Qwen3 Coder 480B';
COMMENT ON COLUMN activities.deployment_status IS 'success, failed, pending';
COMMENT ON COLUMN activities.deployment_attempts IS 'Number of auto-fix attempts before successful deployment';

CREATE INDEX idx_activities_student ON activities(student_id);
CREATE INDEX idx_activities_lesson ON activities(lesson_id);

-- ============================================================================
-- COLLABORATIVE EDITING & VERSION HISTORY
-- ============================================================================

-- Content versions (Google Doc-like editing)
CREATE TABLE content_versions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  content_type text NOT NULL CHECK (content_type IN ('strategy', 'lesson')),
  content_id uuid NOT NULL,
  version_number integer NOT NULL,
  content jsonb NOT NULL,
  changes_summary text,
  edited_by uuid REFERENCES tutors(id),
  edit_type text NOT NULL CHECK (edit_type IN ('ai_generated', 'manual_edit', 'ai_iteration', 'tutor_refinement')),
  edit_notes text, -- WHY tutor edited (feeds learning insights!)
  self_evaluation_delta jsonb,
  created_at timestamptz DEFAULT now()
);

COMMENT ON TABLE content_versions IS 'Version history for strategies and lessons (collaborative editing)';
COMMENT ON COLUMN content_versions.edit_notes IS 'Tutors explanation of why they edited - feeds into learning_insights!';

CREATE INDEX idx_content_versions_lookup ON content_versions(content_type, content_id, version_number DESC);
CREATE INDEX idx_content_versions_by_content ON content_versions(content_type, content_id);

-- Activity chat history (conversational editing)
CREATE TABLE activity_chat_history (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  activity_id uuid REFERENCES activities(id) ON DELETE CASCADE,
  tutor_id uuid REFERENCES tutors(id),
  message_type text NOT NULL CHECK (message_type IN ('tutor_request', 'agent_response', 'agent_action', 'system_message')),
  message_content text NOT NULL,
  code_snapshot text,
  sandbox_url text,
  deployment_result jsonb,
  created_at timestamptz DEFAULT now()
);

COMMENT ON TABLE activity_chat_history IS 'Chat-based conversational editing for activities ("Make molecules bigger")';

CREATE INDEX idx_activity_chat_lookup ON activity_chat_history(activity_id, created_at);

-- ============================================================================
-- SELF-IMPROVEMENT SYSTEM
-- ============================================================================

-- Agent performance metrics (self-evaluation storage)
CREATE TABLE agent_performance_metrics (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_type varchar NOT NULL CHECK (agent_type IN ('strategy_planner', 'lesson_creator', 'activity_creator')),
  agent_id varchar NOT NULL,
  session_id uuid,
  success_rate numeric DEFAULT 1.0 CHECK (success_rate >= 0 AND success_rate <= 1),
  confidence_scores jsonb DEFAULT '[]',
  error_count integer DEFAULT 0,
  last_error text,
  evaluation_details jsonb, -- Full self-evaluation with criteria, weaknesses, improvements
  created_at timestamptz DEFAULT now(),
  last_updated timestamptz DEFAULT now()
);

COMMENT ON TABLE agent_performance_metrics IS 'Tracks agent self-evaluations for reflection loop analysis';

CREATE INDEX idx_agent_performance_type ON agent_performance_metrics(agent_type);
CREATE INDEX idx_agent_performance_success ON agent_performance_metrics(success_rate);
CREATE INDEX idx_agent_performance_created ON agent_performance_metrics(created_at DESC);

-- Learning insights (reflection loop outputs)
CREATE TABLE learning_insights (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  insight_type varchar NOT NULL CHECK (insight_type IN ('pattern_recognition', 'effectiveness_correlation', 'cultural_adaptation', 'optimization_opportunity')),
  description text NOT NULL,
  supporting_evidence jsonb DEFAULT '[]',
  applicability jsonb NOT NULL, -- {"grades": ["9", "10"], "subjects": ["Physics"]}
  validation_required boolean DEFAULT true,
  priority varchar DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high', 'critical')),
  status varchar DEFAULT 'pending' CHECK (status IN ('pending', 'validated', 'applied', 'deprecated')),
  created_at timestamptz DEFAULT now(),
  validated_at timestamptz,
  applied_at timestamptz
);

COMMENT ON TABLE learning_insights IS 'System-generated insights from low-scoring outputs (reflection loop)';

CREATE INDEX idx_learning_insights_status ON learning_insights(status);
CREATE INDEX idx_learning_insights_type ON learning_insights(insight_type);

-- Platform memory (agentic memory for personalization)
CREATE TABLE platform_memory (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  entity_type varchar NOT NULL CHECK (entity_type IN ('student', 'session', 'content', 'platform')),
  entity_id uuid NOT NULL,
  memory_category varchar NOT NULL,
  memory_key varchar NOT NULL,
  memory_value jsonb NOT NULL,
  confidence_score numeric DEFAULT 0.5 CHECK (confidence_score >= 0 AND confidence_score <= 1),
  created_at timestamptz DEFAULT now(),
  last_updated timestamptz DEFAULT now(),
  update_count integer DEFAULT 1
);

COMMENT ON TABLE platform_memory IS 'Agentic memory: engagement patterns, learning preferences, effectiveness data';

CREATE INDEX idx_platform_memory_entity ON platform_memory(entity_type, entity_id);
CREATE INDEX idx_platform_memory_confidence ON platform_memory(confidence_score);

-- Cross-agent learning
CREATE TABLE cross_agent_learning (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  pattern_detected varchar NOT NULL,
  contributing_agents text[] NOT NULL,
  confidence_score numeric DEFAULT 0.5 CHECK (confidence_score >= 0 AND confidence_score <= 1),
  applications jsonb DEFAULT '[]',
  propagation_status varchar DEFAULT 'identified' CHECK (propagation_status IN ('identified', 'testing', 'validated', 'applied', 'deprecated')),
  validation_results jsonb DEFAULT '[]',
  created_at timestamptz DEFAULT now(),
  last_updated timestamptz DEFAULT now(),
  usage_count integer DEFAULT 0,
  success_rate numeric DEFAULT 0.0
);

COMMENT ON TABLE cross_agent_learning IS 'Patterns learned by one agent propagated to others';

-- ============================================================================
-- HELPER FUNCTIONS
-- ============================================================================

-- Create content version atomically
CREATE OR REPLACE FUNCTION create_content_version(
  p_content_type text,
  p_content_id uuid,
  p_new_content jsonb,
  p_edited_by uuid,
  p_edit_type text,
  p_edit_notes text DEFAULT NULL
) RETURNS uuid AS $$
DECLARE
  v_new_version_number integer;
  v_version_id uuid;
BEGIN
  -- Get next version number
  SELECT COALESCE(MAX(version_number), 0) + 1 INTO v_new_version_number
  FROM content_versions
  WHERE content_type = p_content_type AND content_id = p_content_id;
  
  -- Insert new version
  INSERT INTO content_versions (
    content_type, content_id, version_number, content,
    edited_by, edit_type, edit_notes
  ) VALUES (
    p_content_type, p_content_id, v_new_version_number, p_new_content,
    p_edited_by, p_edit_type, p_edit_notes
  ) RETURNING id INTO v_version_id;
  
  -- Update parent table
  IF p_content_type = 'strategy' THEN
    UPDATE strategies 
    SET current_version = v_new_version_number, updated_at = now()
    WHERE id = p_content_id;
  ELSIF p_content_type = 'lesson' THEN
    UPDATE lessons 
    SET current_version = v_new_version_number, updated_at = now()
    WHERE id = p_content_id;
  END IF;
  
  RETURN v_version_id;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- ANALYTICS VIEWS
-- ============================================================================

-- Agent improvement over time
CREATE VIEW agent_improvement_over_time AS
SELECT 
  agent_type,
  DATE(created_at) as date,
  AVG(success_rate) as avg_success_rate,
  COUNT(*) as generation_count
FROM agent_performance_metrics
GROUP BY agent_type, DATE(created_at)
ORDER BY date DESC;

-- Recent validated learning insights
CREATE VIEW recent_learning_insights AS
SELECT 
  insight_type,
  description,
  applicability,
  status,
  created_at
FROM learning_insights
WHERE status = 'validated'
ORDER BY created_at DESC
LIMIT 20;

-- Tutor edit patterns (for learning what AI gets wrong)
CREATE VIEW tutor_edit_patterns AS
SELECT 
  cv.content_type,
  cv.edit_type,
  t.name AS tutor_name,
  COUNT(*) AS edit_count,
  AVG(LENGTH(cv.changes_summary)) AS avg_change_length,
  STRING_AGG(DISTINCT cv.edit_notes, ' | ' ORDER BY cv.edit_notes) AS common_edit_reasons
FROM content_versions cv
JOIN tutors t ON cv.edited_by = t.id
WHERE cv.edit_type IN ('manual_edit', 'tutor_refinement')
GROUP BY cv.content_type, cv.edit_type, t.name;

-- Activity iteration stats (how many fixes needed)
CREATE VIEW activity_iteration_stats AS
SELECT 
  a.id AS activity_id,
  a.title,
  a.deployment_status,
  a.deployment_attempts,
  COUNT(ach.id) AS chat_messages,
  COUNT(ach.id) FILTER (WHERE ach.message_type = 'tutor_request') AS tutor_requests,
  COUNT(ach.id) FILTER (WHERE ach.message_type = 'agent_action') AS code_iterations,
  MAX(ach.created_at) AS last_interaction
FROM activities a
LEFT JOIN activity_chat_history ach ON a.id = ach.activity_id
GROUP BY a.id, a.title, a.deployment_status, a.deployment_attempts;

-- ============================================================================
-- DEMO SEED DATA
-- ============================================================================

-- Demo tutors
INSERT INTO tutors (id, name, email, teaching_style, education_system) VALUES
('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Dr. Sarah Johnson', 'sarah@demo.com', 'Socratic Method with guided discovery', 'IGCSE'),
('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a22', 'Prof. Michael Chen', 'michael@demo.com', 'Direct instruction with scaffolding', 'IB'),
('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a33', 'Ms. Aisha Patel', 'aisha@demo.com', 'Inquiry-based learning', 'CBSE');

-- Demo students (diverse profiles)
INSERT INTO students (id, tutor_id, name, grade, subject, learning_style, nationality, residence, languages, interests, objectives) VALUES
('b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a01', 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Alex Chen', '10', 'Physics', 'Visual', 'Singapore', 'Singapore', 
 '["English", "Mandarin", "Malay"]', 
 '["space exploration", "robotics", "coding", "video games", "sci-fi movies"]', 
 '["Ace IGCSE Physics with A*", "Build strong foundation for A-levels", "Understand real-world applications of physics"]'),

('b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a02', 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Emma Rodriguez', '9', 'Chemistry', 'Kinesthetic', 'USA', 'California', 
 '["English", "Spanish"]', 
 '["environmental science", "cooking", "music", "painting", "sustainability"]', 
 '["Understand molecular structures", "Prepare for AP Chemistry", "Connect chemistry to environmental issues"]'),

('b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a03', 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a22', 'Yuki Tanaka', '11', 'Biology', 'Auditory', 'Japan', 'Tokyo', 
 '["Japanese", "English"]', 
 '["marine biology", "photography", "anime", "nature documentaries", "conservation"]', 
 '["Excel in IB Biology HL (7/7)", "Research career preparation", "Understand biodiversity and ecosystems"]');

-- Success notification
DO $$
BEGIN
  RAISE NOTICE '✅ TutorPilot database schema created successfully!';
  RAISE NOTICE '📊 Tables created: 12';
  RAISE NOTICE '🔗 Relationships: Agent handoff support + collaborative editing';
  RAISE NOTICE '🧠 Self-improvement: Performance metrics + learning insights';
  RAISE NOTICE '👥 Demo data: 3 tutors + 3 students with rich profiles';
END $$;

